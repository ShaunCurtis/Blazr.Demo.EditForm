@page "/Rendering"
@namespace Blazr.Demo.EditForm.UI.UI

<PageTitle>Component Rendering</PageTitle>

<h1>Component Rendering</h1>
<div class="container">
    <div class="row">
        <div class="col">
            <p>
                This page demostrates how page/component Rendering works, and how to code it correvtly.
            </p>
        </div>
    </div>
    <div class="row border border-dark m-2 mb-2 p-2 pb-0">
        <div class="col-9">
            <p>
                This is the standard button and event handler from the counter page.  It implements the void async pattern
            </p>
            <pre>
        private void IncrementCount()
        {
            currentCount++;
        }
            </pre>
        </div>
        <div class="col-3 text-end text-top">
            <div class="m-2">
                <button class="btn btn-primary" @onclick="IncrementCount">Increment Counter</button>
            </div>
            <div class="alert alert-secondary">Current count: @currentCount</div>
        </div>
    </div>
    <div class="row border border-dark m-2 mb-2 p-2 pb-0">
        <div class="col-9">
            <p>
                This is the <code>async void</code> event handler.  It demonstates what goes wrong when using this pattern with yielding code.
            </p>
            <p>
                At <code>await Task.Yield()</code> the handler hands control back to the Blazor Component event handler.  
                It runs <code>StateHasChanged</code> and renders the component.  With a <code>void</code> reference, 
                there's nothing to wait so it runs to completion before <code>currentCount++</code> runs incrementing the counter.
                 On multiple clicks the counter advances, but it's one step behind.
            </p>
            <pre>
    private async void IncrementCountVoidAsync()
    {
        await Task.Yield();
        currentCount++;
    }
            </pre>
        </div>
        <div class="col-3 text-end text-top">
            <div class="m-2">
                <button class="btn btn-primary" @onclick="IncrementCountVoidAsync">Async Void Increment</button>
            </div>
            <div class="m-2">
                <button class="btn btn-dark" @onclick="RenderComponent">Render the Page</button>
            </div>
            <div class="alert alert-secondary">Current count: @currentCount</div>
        </div>
    </div>
    <div class="row border border-dark m-2 mb-2 p-2 pb-0">
        <div class="col-9">
            <p>
                This is the <code>async Task</code> event handler.  It demonstates how to implement async code correctly.
            </p>
            <p>
                At <code>await Task.Yield()</code> the handler hands control back to the Blazor Component event handler.  
                It runs <code>StateHasChanged</code> and renders the component.  The Blazor Component event handler has a <code>Task</code>, 
                so it checks it for completion.  If it needs to await that task and if so runs <code>StateHasChanged</code> once the Task has completed.
            </p>
            <pre>
    private async Task IncrementCountVoidAsync()
    {
        await Task.Yield();
        currentCount++;
    }
            </pre>
        </div>
        <div class="col-3 text-end text-top">
            <div class="m-2">
                <button class="btn btn-primary" @onclick="IncrementCountTaskAsync">Async Task Increment</button>
            </div>
            <div class="m-2">
                <button class="btn btn-dark" @onclick="RenderComponent">Render the Page</button>
            </div>
            <div class="alert alert-secondary">Current count: @currentCount</div>
        </div>
    </div>
</div>

@code {
    private int currentCount = 0;

    private void IncrementCount()
    {
        currentCount++;
    }

    private async void IncrementCountVoidAsync()
    {
        await Task.Yield();
        currentCount++;
    }

    private async Task IncrementCountTaskAsync()
    {
        await Task.Yield();
        currentCount++;
    }

    private void RenderComponent()
    => this.StateHasChanged();
}
